#!/bin/bash
#
###     configure system to use networkradius.com binary packages these are newer than those supplied by ubuntu     ###
#
###     determine the distribution and version and setup the networkradius repo if needed    ###
#
if [ ! $UID = 0 ]; then
    echo This must be run as root
    exit 1
fi

if lsb_release -d | awk -F"\t" '{print $2}' | grep -q Ubuntu
    then
            if lsb_release -d | awk -F"\t" '{print $2}' | grep -q 20.04
                then
                    echo ""
                    echo "found ubuntu 20.04"
                    if cat /etc/apt/sources.list | grep -q networkradius
                        then
                            echo "networkradius package repo is already present in (/etc/apt/sources.list)"
                        else
                            echo "adding networkradius repo (deb https://packages.networkradius.com/releases/ubuntu-focal focal main) to (/etc/apt/sources.list)"
                            echo 'deb [trusted=yes] https://packages.networkradius.com/releases/ubuntu-focal focal main' >> /etc/apt/sources.list
                    fi
            elif lsb_release -d | awk -F"\t" '{print $2}' | grep -q 18.04
                then
                    echo ""
                    echo "found ubuntu 18.04"
                    if cat /etc/apt/sources.list | grep -q networkradius
                        then
                            echo "networkradius package repo is already present in (/etc/apt/sources.list)"
                        else
                            echo "adding ( https://packages.networkradius.com/releases/ubuntu-bionic bionic main) to (/etc/apt/sources.list)"
                            echo 'deb [trusted=yes] https://packages.networkradius.com/releases/ubuntu-bionic bionic main' >> /etc/apt/sources.list
                    fi
                    # add additional repo for new php needed for new composer 
                    if -s /etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list
                        then
                            echo "ondrej-ubuntu-php package repo is already present in (/etc/apt/sources.list.d/)"
                        else
                            echo "creating the repo file with the address ( http://ppa.launchpad.net/ondrej/php/ubuntu bionic main) to (/etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list)"
                            echo 'deb [trusted=yes] http://ppa.launchpad.net/ondrej/php/ubuntu bionic main' >> /etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list
                            echo 'deb-src http://ppa.launchpad.net/ondrej/php/ubuntu bionic main' >> /etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list
                    fi
            fi
elif lsb_release -d | awk -F"\t" '{print $2}' | grep -q Debian
    then
            if lsb_release -d | awk -F"\t" '{print $2}' | grep -q stretch
                then
                    echo ""
                    echo "found Debian stretch"
                    if cat /etc/apt/sources.list | grep -q networkradius
                        then
                            echo "networkradius package repo is already present in (/etc/apt/sources.list)"
                        else
                            echo "adding (deb https://packages.networkradius.com/releases/debian-stretch stretch main) to (/etc/apt/sources.list)"
                            echo 'deb [trusted=yes] https://packages.networkradius.com/releases/debian-stretch stretch main' >> /etc/apt/sources.list
                    fi
            elif lsb_release -d | awk -F"\t" '{print $2}' | grep -q buster
                then
                    echo ""
                    echo "found Debian buster"
                    if cat /etc/apt/sources.list | grep -q networkradius
                        then
                            echo "networkradius package repo is already present in (/etc/apt/sources.list)"
                        else
                            echo "adding (deb https://packages.networkradius.com/releases/debian-buster buster main) to (/etc/apt/sources.list)"
                            echo 'deb [trusted=yes] https://packages.networkradius.com/releases/ubuntu-focal focal main' >> /etc/apt/sources.list
                    fi
            fi
fi

#
###     import networkradius.com pgp key    ###
#

export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
if apt-key list | grep -q networkradius
    then 
        echo "the networkradius repo gpg key was found"
    else
        echo "the networkradius repo gpg key was not found we will add it to the local keyring now "
        apt-key adv --keyserver keyserver.ubuntu.com --recv-key 0x41382202
        if apt-key list | grep -q networkradius
            then 
                echo "the networkradius gpg key was added successfully"
            else 
                echo "something went wrong while adding the network radius gpg key"
        fi
fi

#
###     main package setup      ###
#

apt-get update --yes
apt-get upgrade --yes
apt-get install --yes php-cli php-mbstring php-mysql php-curl unzip mariadb-server mariadb-client
apt-cache policy freeradius | grep -q networkradius
if [ $? = 1 ]; then
    echo "ERROR"
    echo ""
    echo "the apt policy for freeradius would install distribution provided packages!!!"
    echo "please check/correct the apt config to install the NetworkRADIUS binaries!!!"
    echo "you can check the policy using the command!!!"
    echo "apt-cache policy freeradius"
    echo ""
    echo ".. exiting due to apt policy mismatch !"
    exit 1
fi

apt-get install --yes freeradius freeradius-common freeradius-utils freeradius-mysql

#
###     test for an existing swap device or file, if none exists we will create one     ###
#

if cat /etc/fstab | grep -q swap
        then
                echo "swap was found in fstab"
                if free | awk '/^Swap:/ {exit !$2}'
                        then
                                echo "swap is enabled"
                        else
                                echo "swap was not enabled we will enable it now"
                                swapon -a
                fi
        else
            echo "no swap found in fstab we will now create and enable a swapfile"
            /usr/bin/fallocate -l 4G /swapfile
            /bin/chmod 600 /swapfile
            /sbin/mkswap /swapfile
            /sbin/swapon /swapfile
            echo '/swapfile none swap sw 0 0' >> /etc/fstab
fi

#
###     setup sysctl    ### 
#

if cat /etc/sysctl.conf | grep -q vm.swappiness
    then
        echo "vm.swappiness found in sysctl.conf "
        if sysctl -a | grep -q swappiness
            then 
                echo "vm.swappiness appears enabled" 
            else 
                echo "vm.swappiness appears disabled we will enable it " 
                /sbin/sysctl vm.swappiness=10
        fi
    else 
        echo "vm.swappiness was not found in sysctl.conf we will add and enable it now"
        echo 'vm.swappiness=10' >> /etc/sysctl.conf
        /sbin/sysctl vm.swappiness=10
fi


if cat /etc/sysctl.conf | grep -q vm.vfs_cache_pressure
    then
        echo "vm.vfs_cache_pressure found in sysctl.conf "
        if sysctl -a | grep -q vm.vfs_cache_pressure
            then 
                echo "vm.vfs_cache_pressure appears enabled" 
            else 
                echo "vm.vfs_cache_pressure appears disabled we will enable it " 
                /sbin/sysctl vm.vfs_cache_pressure=50
        fi
    else 
        echo "vm.vfs_cache_pressure was not found in sysctl.conf we will add and enable it now"
        echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf
        /sbin/sysctl vm.vfs_cache_pressure=50
fi

#
###     setup the sql server enviroment (mariadb/mysql)     ###
#

if [ -s .env ] 
    then 
        echo "the .env file already exists and has a non zero size you should check its contents"
        echo "you can do so with the command (nano .env) "
    else 
        echo "no .env file was found at .env"
        echo "as no .env file was found we will currently assume this is the first time the kickstart script has been run "
        echo "and so we will now also run the /usr/bin/mysql_secure_installation script to secure the sql installation "
        echo "creating a password for the mysql root user, removing remote root access the test db and user "
        echo "the sql root password will be needed in the next step, setting up the .env file "
        echo ""
        /usr/bin/mysql_secure_installation
        echo ""
        echo '# PUT YOUR MYSQL PASSWORD YOU JUST ENTERED BELOW, THEN PRESS CTRL+X and Y to SAVE CHANGES' >> .env
        echo 'MYSQL_PASSWORD=changeme' >> .env
        chmod 660 .env
        chown root:adm .env
        nano .env
        echo ""        
fi

echo ""
echo "all initial package install tasks have completed" 
echo "it is now time to run genie amd perform initial configuration"
echo ""
# eof
